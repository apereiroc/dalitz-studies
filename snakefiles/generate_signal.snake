"""
  Rules for generating toy signal events
"""
import os


nsig = 3_000

available_cpu = os.cpu_count() - 1
events_per_job_for_Bs = get_events_per_job(nsig, available_cpu)

rule get_hmax_for_generating_Bs_toy:
    input:
        binary="./get_hmax_Bs",
        pars="par/standard.json",
    output:
        data_Bs_path + "temp/hmax.dat",
    run:
        shell("{input.binary} -i {input.pars} -s 666 -n 10000 -o {output}")


rule i_job_for_generating_Bs_toy:
    input:
        binary="./btokpikpi_CovGen_sig",
        pars="par/standard.json",
        file_hmax=data_Bs_path + "temp/hmax.dat",
    output:
        data_Bs_path + "sig_Bs_{ipiece}.root",
    run:
        seed = get_seed(f"{output}")

        hmax = float(open(f"{input.file_hmax}", "r").read())

        nevents = events_per_job_for_Bs[int(wildcards.ipiece)]

        shell(f"{input.binary} -i {input.pars} -n {nevents} -s {seed} --hmax {hmax} -o {output}")


rule all_jobs_for_generating_Bs_toy:
    input:
        files = lambda wildcards: expand(
                data_Bs_path+"sig_Bs_{ipiece}.root",
                ipiece=range(available_cpu))
    output:
        data_Bs_path + "sig_Bs.root",
    run:
        shell(f"hadd -f {output} {input.files}")
