"""
  Rules for generating toy signal events
"""


rule get_hmax_for_generating_toy:
    input:
        binary = bin_path + "get_hmax",
        pars = "par/standard.json",
    output:
        temp(data_path + "{meson}/hmax.dat"),
    run:
        shell("{input.binary} --meson {wildcards.meson}\
            -i {input.pars} -s 666 -n 10000 -o {output}")


rule generate_signal_toy_single_job:
    input:
        binary = bin_path + "xtokpikpi_CovGen_sig",
        pars = "par/standard.json",
        file_hmax = data_path + "{meson}/hmax.dat",
    output:
        temp(data_path + "{meson}/sig_{ipiece}.root"),
    log:
        "log/signal-{meson}-{ipiece}.log"
    run:
        seed = get_seed(f"{output}")

        hmax = float(open(f"{input.file_hmax}","r").read())

        nevents = sig_events_per_job[wildcards.meson][int(wildcards.ipiece)]

        shell(f"({input.binary} --meson {wildcards.meson} \
                -i {input.pars} -n {nevents} -s {seed}\
                --hmax {hmax} -o {output}) > {log}")


rule generate_signal_toy_all_jobs:
    input:
        files = lambda w: expand(
            data_path + "{meson}/sig_{ipiece}.root",
            meson=w.meson,
            ipiece=range(available_cpu))
    output:
        data_path + "{meson}/signal_set.root",
    run:
        shell(f"hadd -f {output} {input.files}")
